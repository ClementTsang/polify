//! Errors that polify may encounter.

/// An error generated by polify.
#[derive(thiserror::Error, Debug)]
pub enum PolifyError {
    /// An I/O error.
    #[error("io error")]
    Io(#[from] std::io::Error),
    /// An error from the image crate.
    #[error("image error")]
    Image(#[from] image::ImageError),
    #[error("file already exists at {0}")]
    /// An error if a file already exists at the given save location.
    FileAlreadyExists(String),
    #[error("setting is not valid: {0}")]
    /// An error formed if a setting is invalid.
    InvalidSetting(String),
    /// An error during preproccessing.
    #[error("preprocessing failed")]
    PreProcessing,
    /// An error during Luma conversion.
    #[error("luma conversion failed")]
    LumaConversion,
}

/// A `Result` type with a [`PolifyError`].
pub type Result<T> = std::result::Result<T, PolifyError>;

impl From<PolifyError> for wasm_bindgen::JsValue {
    fn from(err: PolifyError) -> Self {
        wasm_bindgen::JsValue::from(format!("Error: {}", err.to_string()))
    }
}
